# Generated by OpenSesame 0.24-pre2 (Cody Crick)
# Fri Jun 10 14:41:04 2011 (posix)
# 
# Copyright Sebastiaan Mathot (2010-2011)
# <http://www.cogsci.nl>
# 
set test_sketchpad "yes"
set foreground "white"
set subject_parity "even"
set description "Estimates the average error of timing"
set mouse_backend "legacy"
set title "Test suite"
set sampler_backend "legacy"
set coordinates "relative"
set height "768"
set test_frame_rate "yes"
set width "1024"
set compensation "0"
set test_synth "yes"
set background "black"
set subject_nr "0"
set keyboard_backend "legacy"
set canvas_backend "legacy"
set start "test_suite"
set synth_backend "legacy"

define sketchpad synth_message
	set duration "1000"
	set start_response_interval "no"
	draw textline 0 0 "Testing sound ..." center=1 color=white font_family=mono font_size=18 show_if="always"

define feedback feedback
	set duration "keypress"
	draw textline 0 -32 "Frame rate = [frame_rate] Hz" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 32 "Press any key to continue ..." center=1 color=white font_family=mono font_size=18 show_if="always"

define sketchpad sketchpad_message
	set duration "1000"
	set start_response_interval "no"

define synth sound1
	set decay "5"
	set length "[soa]"
	set volume "1"
	set attack "0"
	set duration "sound"
	set freq "220"
	set osc "sine"
	set pan "0"

define sequence synth_timing
	run synth_message "always"
	run synth_loop "always"
	run get_avg_error "always"
	run report "always"

define inline_script get_sound_error
	___run__
	soa = self.get("soa")
	self.experiment.measured = self.get("time_sound2") - self.get("time_sound1")
	self.experiment.error = self.experiment.measured - self.experiment.soa
	if not hasattr(self.experiment, "results"):
		self.experiment.results = []
	self.experiment.results.append(self.experiment.error)
	__end__
	set _prepare ""

define sequence sketchpad_sequence
	run display1 "always"
	run display2 "always"
	run get_error "always"
	run logger "always"

define loop synth_loop
	set item "synth_sequence"
	set cycles "4"
	set order "sequential"
	set repeat "10"
	setcycle 0 soa "50"
	setcycle 0 item "synth"
	setcycle 1 soa "100"
	setcycle 1 item "synth"
	setcycle 2 soa "150"
	setcycle 2 item "synth"
	setcycle 3 soa "200"
	setcycle 3 item "synth"
	run synth_sequence

define sketchpad Welcome
	set duration "keypress"
	set start_response_interval "no"
	set description "Displays stimuli"
	draw textline 0 -288 "OpenSesame Test Suite" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 -192 "This experiment will test 3 aspects of timing" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 -128 "1) Accuracy of display (sketchpad) presentation" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 -64 "2) Maximum framerate (to see if the framerate is automatically capped)" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 0 "3) Accuracy of sound (synth/sampler) timing" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0.0 96.0 "You currently have the [canvas_backend] canvas backend selected" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0.0 192.0 "Press any key to begin" center=1 color=white font_family=mono font_size=18 show_if="always"

define sequence test_suite
	run Welcome "always"
	run sketchpad_timing "test_sketchpad = yes"
	run max_frame_rate "test_frame_rate = yes"
	run synth_timing "test_synth = yes"

define logger logger
	set description "Logs experimental data"
	set auto_log "no"
	log "soa"
	log "item"
	log "measured"
	log "error"

define loop sketchpad_loop
	set item "sketchpad_sequence"
	set cycles "4"
	set order "sequential"
	set repeat "10"
	setcycle 0 soa "50"
	setcycle 0 item "sketchpad"
	setcycle 1 soa "100"
	setcycle 1 item "sketchpad"
	setcycle 2 soa "150"
	setcycle 2 item "sketchpad"
	setcycle 3 soa "200"
	setcycle 3 item "sketchpad"
	run sketchpad_sequence

define inline_script get_avg_error
	___run__
	self.experiment.error = sum(self.experiment.results) / len(self.experiment.results)
	__end__
	set _prepare ""

define sketchpad display2
	set duration "[soa]"
	set start_response_interval "no"
	draw rect -448 -320 896 640 fill=1 penwidth=1 color=yellow show_if="always"

define sketchpad display1
	set duration "[soa]"
	set start_response_interval "no"
	draw rect -448 -320 896 640 fill=1 penwidth=1 color=blue show_if="always"

define feedback report
	set duration "keypress"
	draw textline 0 -64 "Average error = [error]ms" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 0 "Detailed information has been logged to [logfile]" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 64 "Press any key to continue ..." center=1 color=white font_family=mono font_size=18 show_if="always"

define inline_script inline_script
	___run__
	start_time = self.time()
	
	n = 10
	
	for i in range(n):
		for c in self.canvas_list:
			c.show()
	end_time = self.time()
	duration = end_time - start_time
	temp_res = duration / (n * len(self.canvas_list))
	frame_rate = 1000 / temp_res
	
	self.experiment.set("_duration", duration)
	self.experiment.set("temp_res", temp_res)
	self.experiment.set("frame_rate", frame_rate)
	__end__
	___prepare__
	import math
	
	self.canvas_list = []
	for a in range(0, 360, 5):
		c = self.offline_canvas()
	
		x = c.xcenter() + 50 * math.cos(math.radians(a))
		y = c.ycenter() + 50 * math.sin(math.radians(a))
	
		c.circle(x, y, 10)
	
		self.canvas_list.append(c)
	__end__
	set description "Executes Python code"

define synth sound2
	set decay "5"
	set length "[soa]"
	set volume "1"
	set attack "0"
	set duration "sound"
	set freq "440"
	set osc "sine"
	set pan "0"

define sequence synth_sequence
	run sound1 "always"
	run sound2 "always"
	run get_sound_error "always"
	run logger "always"

define sequence sketchpad_timing
	run sketchpad_loop "always"
	run get_avg_error "always"
	run report "always"

define sequence max_frame_rate
	run inline_script "always"
	run feedback "always"

define inline_script get_error
	___run__
	soa = self.get("soa")
	self.experiment.measured = self.get("time_display2") - self.get("time_display1")
	self.experiment.error = self.experiment.measured - self.experiment.soa
	if not hasattr(self.experiment, "results"):
		self.experiment.results = []
	self.experiment.results.append(self.experiment.error)
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence __sequence

